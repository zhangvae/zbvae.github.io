<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[zbvae's blog]]></title>
  <subtitle><![CDATA[这个世界怎么了，明明可以靠才华吃饭，偏要靠脸!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.zbvae.com//"/>
  <updated>2015-07-11T02:53:35.217Z</updated>
  <id>http://blog.zbvae.com//</id>
  
  <author>
    <name><![CDATA[Bin Zhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用Echarts制作散点图(Excel 导入数据方式)]]></title>
    <link href="http://blog.zbvae.com/2015/07/11/%E4%BD%BF%E7%94%A8Echarts%E5%88%B6%E4%BD%9C%E6%95%A3%E7%82%B9%E5%9B%BE-Excel-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E6%96%B9%E5%BC%8F/"/>
    <id>http://blog.zbvae.com/2015/07/11/使用Echarts制作散点图-Excel-导入数据方式/</id>
    <published>2015-07-11T02:34:53.000Z</published>
    <updated>2015-07-11T02:53:35.217Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Echarts是一款有效的js制图工具很多时候，其主要优势在于网页浏览时，具有非常炫酷的效果，但是将其保存为静态图像也很美观。我们在写工作报告或写论文的时候，都需要制作基本的统计图表以直观展示结果数据，虽然Excel提供的图表制作工具能满足要求，但美观度欠佳，也许可以调整，但还是需要很大的工作量，今天给大家介绍一款非常实用的且有效的制图工具，相信，您亲自使用之后就知道它有多妙了！<a id="more"></a></p>
<h2 id="1-Echarts简介">1.Echarts简介</h2><p>　　Echarts相当于一款JS插件，可以制作出绚丽多彩的图表，其支持制作的图表类型和可以使用的样式都非常丰富。本文以Echarts制作散点图为例，向大家展示该工具的实用性。</p>
<h2 id="2-Echarts使用">2.Echarts使用</h2><p>　　Echarts的使用门槛非常简单，但使用条件必须符合规则，在<a href="http://echarts.baidu.com/" target="_blank" rel="external">官网</a>上下载开发包之后，自己准备一个项目主文件夹，在该文件夹新建一个js文件夹（名称自选），将开发包下的build文件夹下的dist文件夹拷贝到js文件夹下，便可以开始使用了。</p>
<p>　　Echarts的使用方式可以分为<strong>AMD模块化导入</strong>和<strong>单文件导入</strong>方式，本文介绍一种简单的单文件导入方式，首先准备好一个html文件，导入echarts.js文件即可。当然你还需要准备一个div控件用于安放图表位置，也可以认为是要为Echarts实例化的Dom对象，这里JavaScript代码也放在body标签下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"GBK"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Echarts of scatter<span class="tag">&lt;/<span class="title">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为Echarts准备一个大小为600*400的div--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"main"</span> <span class="attribute">style</span>=<span class="value">"width:600px;height:400px"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--Echarts单文件导入--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"./js/dist/echarts.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>至此，Echarts文件已完成导入，在使用之前，还需要进行路径配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"GBK"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Echarts of scatter<span class="tag">&lt;/<span class="title">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为Echarts准备一个大小为600*400的div--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"main"</span> <span class="attribute">style</span>=<span class="value">"width:600px;height:400px"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--Echarts单文件导入--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"./js/dist/echarts.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="less"></span><br><span class="line">        <span class="comment">//配置路径</span></span><br><span class="line">        <span class="tag">require</span><span class="class">.config</span>(&#123;</span><br><span class="line">            <span class="tag">paths</span>:&#123;         </span><br><span class="line">                 <span class="attribute">echarts</span>:<span class="string">'./js/dist'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;) </span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>路径配置好后，可以进行使用，首先需要指定要制作的图表，进行模块导入，可以根据需要导入多个图表模块：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="less">    </span><br><span class="line">    <span class="comment">//配置路径 </span></span><br><span class="line">    <span class="tag">require</span><span class="class">.config</span>(&#123;</span><br><span class="line">      	<span class="tag">paths</span>:&#123;</span><br><span class="line">        	<span class="attribute">echarts</span>:<span class="string">'./js/dist'</span></span><br><span class="line">      	&#125; </span><br><span class="line">    &#125;) </span><br><span class="line">    <span class="comment">//使用     </span></span><br><span class="line">    <span class="tag">require</span>(</span><br><span class="line">        [     </span><br><span class="line">            <span class="string">'echarts'</span>,</span><br><span class="line">            <span class="string">'echarts/chart/scatter'</span> </span><br><span class="line">        ] </span><br><span class="line">    )</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基于原先的div创建echarts，并使用，主要是图表option的配置:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="scala"></span><br><span class="line">  <span class="comment">//配置路径</span></span><br><span class="line">  require.config(&#123;</span><br><span class="line">   	paths:&#123;</span><br><span class="line">    	echarts:'./js/dist'</span><br><span class="line">   	&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用</span></span><br><span class="line">  require(</span><br><span class="line">   	[</span><br><span class="line">    	<span class="symbol">'echart</span>s',</span><br><span class="line">    	<span class="symbol">'echarts</span>/chart/scatter'</span><br><span class="line">   	],</span><br><span class="line">  </span><br><span class="line">   function(ec)&#123;</span><br><span class="line">    <span class="comment">//基于准备好的DOM，初始化echarts图表</span></span><br><span class="line">    <span class="keyword">var</span> myChart = ec.init(document.getElementById(<span class="symbol">'mai</span>n'),<span class="symbol">'shin</span>e'); <span class="comment">//这里的shine可以改成其他样式，可以参照官网实例的样式表</span></span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">     	title:&#123;</span><br><span class="line">      		<span class="comment">//可以指定图表标题</span></span><br><span class="line">     	&#125;,</span><br><span class="line">     	renderAsImage : <span class="literal">true</span>,</span><br><span class="line">    	<span class="comment">//symbolList : ["emptyCircle"],</span></span><br><span class="line">     	tooltip:&#123;<span class="comment">//提示框的显示，主要具有web效果</span></span><br><span class="line">      		show:<span class="literal">true</span>,</span><br><span class="line">      		trigger: <span class="symbol">'axi</span>s',</span><br><span class="line">      		showDelay : <span class="number">0</span>,</span><br><span class="line">      		axisPointer:&#123;</span><br><span class="line">       			show: <span class="literal">true</span>,</span><br><span class="line">      	 		<span class="class"><span class="keyword">type</span> :</span> <span class="symbol">'cros</span>s',</span><br><span class="line">       			lineStyle: &#123;</span><br><span class="line">        			<span class="class"><span class="keyword">type</span> :</span> <span class="symbol">'dashe</span>d',</span><br><span class="line">        			width : <span class="number">1</span></span><br><span class="line">       			&#125;</span><br><span class="line">      		&#125;</span><br><span class="line">     	&#125;,</span><br><span class="line"> </span><br><span class="line">     	xAxis:[</span><br><span class="line">      		&#123;</span><br><span class="line">       			name : <span class="symbol">'Wr</span>G',</span><br><span class="line">       			<span class="class"><span class="keyword">type</span> :</span> <span class="symbol">'valu</span>e',</span><br><span class="line">       			scale:<span class="literal">true</span>,</span><br><span class="line">      		&#125;</span><br><span class="line">     	],</span><br><span class="line"></span><br><span class="line">     	yAxis:[</span><br><span class="line">      		&#123;</span><br><span class="line">       			name: <span class="symbol">'C</span>u',</span><br><span class="line">       			<span class="class"><span class="keyword">type</span> :</span> <span class="symbol">'valu</span>e',</span><br><span class="line">       			scale:<span class="literal">true</span>,</span><br><span class="line">      		&#125;</span><br><span class="line">     	],</span><br><span class="line"></span><br><span class="line">     	series:[</span><br><span class="line">      		&#123;</span><br><span class="line">       			<span class="string">"name"</span>:<span class="string">"CuOre"</span>,</span><br><span class="line">       			<span class="string">"type"</span>:<span class="string">"scatter"</span>,</span><br><span class="line">       			<span class="string">"data"</span>:xyData,<span class="comment">//注意这里的xyData就是关键的散点图显示数据，是一个二维数组，即数组内部每一个元素都是xy值对</span></span><br><span class="line">       			<span class="string">"markPoint"</span> : &#123;</span><br><span class="line">        			<span class="comment">//标记点 </span></span><br><span class="line">        			data : [</span><br><span class="line">        				&#123;<span class="class"><span class="keyword">type</span>:</span><span class="symbol">'ma</span>x'&#125;,</span><br><span class="line">        				&#123;<span class="class"><span class="keyword">type</span>:</span><span class="symbol">'mi</span>n'&#125; </span><br><span class="line">        			]</span><br><span class="line">       			&#125;,</span><br><span class="line">       			<span class="string">"markLine"</span> : &#123;</span><br><span class="line">            		<span class="comment">//标记线自己定制 </span></span><br><span class="line">        		&#125;</span><br><span class="line">      		&#125;</span><br><span class="line">     	]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//为ECharts对象加载数据</span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line">   	&#125;</span><br><span class="line">  );</span><br><span class="line"> </span><br><span class="line"> </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在图表的各项已经配置完毕，关键就是xyData数据的充填，当然用户可以自行指定为：[[1,2],[2,2],[3,4],[4,5]],数据少的时候我们可以直接充填，但是数据条目一旦很多，人工输入就很难完成了，因此这里介绍一种从Excel导入数据,再利用js重新组装来进行xyData的充填。代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下是设置从Excel中加载数据--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">importXLS</span>(<span class="params">field</span>)</span>&#123;   </span><br><span class="line">       	<span class="keyword">var</span> fullpath = <span class="built_in">window</span>.document.location.pathname;</span><br><span class="line">       	<span class="keyword">var</span> pos1 = fullpath.indexOf(<span class="string">"/"</span>);</span><br><span class="line">       	<span class="keyword">var</span> fileName1 = fullpath.substring(pos1+<span class="number">1</span>);</span><br><span class="line">       	<span class="keyword">var</span> pos2 = fileName1.lastIndexOf(<span class="string">"/"</span>);</span><br><span class="line"> </span><br><span class="line">       	<span class="keyword">var</span> fileName = fileName1.substring(<span class="number">0</span>,pos2) + <span class="string">"/scatter_data.xls"</span>;<span class="comment">// xls文件的路径  </span></span><br><span class="line">       	objCon = <span class="keyword">new</span> ActiveXObject(<span class="string">"ADODB.Connection"</span>); </span><br><span class="line">       	objCon.Provider = <span class="string">"Microsoft.Jet.OLEDB.4.0"</span>;  </span><br><span class="line">       	objCon.ConnectionString = <span class="string">"Data Source="</span> + fileName + <span class="string">";Extended Properties=Excel 8.0;"</span>;  </span><br><span class="line">       	objCon.CursorLocation = <span class="number">1</span>;  </span><br><span class="line">       	objCon.Open;  </span><br><span class="line">       	<span class="keyword">var</span> strQuery;  </span><br><span class="line">     </span><br><span class="line">    	<span class="comment">//Get the SheetName  </span></span><br><span class="line">       	<span class="keyword">var</span> strSheetName = <span class="string">"Sheet1$"</span>; <span class="comment">//要导入的sheet的名字  </span></span><br><span class="line">  </span><br><span class="line">   		<span class="keyword">var</span> rsTemp =   <span class="keyword">new</span> ActiveXObject(<span class="string">"ADODB.Recordset"</span>);  </span><br><span class="line">   		rsTemp = objCon.OpenSchema(<span class="number">20</span>);  </span><br><span class="line">   		<span class="keyword">if</span>(!rsTemp.EOF)strSheetName = rsTemp.Fields(<span class="string">"Table_Name"</span>).Value;  </span><br><span class="line">   		rsTemp = <span class="literal">null</span>;  </span><br><span class="line"> </span><br><span class="line">   		rsExcel =   <span class="keyword">new</span> ActiveXObject(<span class="string">"ADODB.Recordset"</span>);  </span><br><span class="line">   		strQuery = <span class="string">"SELECT * FROM ["</span> + strSheetName + <span class="string">"]"</span>;  </span><br><span class="line">   		rsExcel.ActiveConnection = objCon;  </span><br><span class="line">   		rsExcel.Open(strQuery);  </span><br><span class="line">  </span><br><span class="line">   		<span class="keyword">var</span> res = [];  </span><br><span class="line">   		<span class="keyword">var</span> temp;  </span><br><span class="line">   		<span class="keyword">while</span>(!rsExcel.EOF)&#123;  </span><br><span class="line">    		temp = rsExcel.Fields(field).value; </span><br><span class="line">    		res.push(temp);       </span><br><span class="line">    		rsExcel.MoveNext;     </span><br><span class="line">   		&#125;   </span><br><span class="line"> </span><br><span class="line">   		<span class="comment">// Close the connection and dispose the file  </span></span><br><span class="line">   		objCon.Close;  </span><br><span class="line">   		objCon =<span class="literal">null</span>;  </span><br><span class="line">   		rsExcel = <span class="literal">null</span>;  </span><br><span class="line">   		<span class="keyword">return</span> res;   </span><br><span class="line"> 	&#125;  </span><br><span class="line"> </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>导入的Excel数据是读取某个字段的一维数组数据，我们需要导入x,y两个字段的数据，并组装成xyData二维数组格式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">ec</span>)</span>&#123;</span><br><span class="line">	    <span class="keyword">var</span> xData = importXLS(<span class="number">1</span>);</span><br><span class="line">	    <span class="keyword">var</span> yData = importXLS(<span class="number">2</span>);</span><br><span class="line">	    <span class="keyword">var</span> xyData = [];</span><br><span class="line">	  </span><br><span class="line">	    <span class="keyword">var</span> i;</span><br><span class="line">	    <span class="comment">//转化为散点图需要的二维数组系列</span></span><br><span class="line">	    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;xData.length;i++)&#123;</span><br><span class="line">	     xyData.push(<span class="keyword">new</span> <span class="built_in">Array</span>(xData[i],yData[i]));</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    <span class="comment">//基于准备好的DOM，初始化echarts图表</span></span><br><span class="line">	    <span class="keyword">var</span> myChart = ec.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>),<span class="string">'shine'</span>);</span><br><span class="line">	    ... <span class="comment">//接着上面的使用Echarts的代码</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样便实现了从Excel中导入数据，重新组装，充填为散点图所需要的二维数组格式。给一个本程序生成的静态图片如下：</p>
<p><img src="/images/scatter1.png" alt="散点图，样式为infographic"><br><img src="scatter2.png" alt="散点图，样式为shine"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：Echarts是一款有效的js制图工具很多时候，其主要优势在于网页浏览时，具有非常炫酷的效果，但是将其保存为静态图像也很美观。我们在写工作报告或写论文的时候，都需要制作基本的统计图表以直观展示结果数据，虽然Excel提供的图表制作工具能满足要求，但美观度欠佳，也许可以调整，但还是需要很大的工作量，今天给大家介绍一款非常实用的且有效的制图工具，相信，您亲自使用之后就知道它有多妙了！]]>
    
    </summary>
    
      <category term="技术交流" scheme="http://blog.zbvae.com/tags/%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 对象克隆]]></title>
    <link href="http://blog.zbvae.com/2015/07/11/Java-%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86/"/>
    <id>http://blog.zbvae.com/2015/07/11/Java-对象克隆/</id>
    <published>2015-07-11T02:17:54.000Z</published>
    <updated>2015-07-11T02:30:00.337Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Java最大的简洁性在于去除了指针，以引用来代替，在函数传参过程中，一般分为<strong>值传递</strong>和<strong>引用传递</strong>，值传递是直接拷贝一份值单元传递过去，原有值不会随被传递值改变而改变；引用传递则传递的是该引用数据类型变量的内存地址，因此原有对象属性值会随着传递引用变量对其的改变而达到间接改变的目的。Java中对所有复杂数据类型包括数组的传递都是引用传递方式，即传其地址，那么如何使Java具有像C和C++那样传递复杂数据类型，而不改变原有值的属性，这就需要利用到Java对象克隆知识了。 <a id="more"></a></p>
<h2 id="1-String_传递">1.String 传递</h2><p>　　首先声明一点，虽然String也属于引用数据类型，但是它属于Java语言当中设计的特殊类型，具有值不可更改的特点，因此在进行参数传递时，不具备引用传递的特点，而是当成值传递方式来代替。</p>
<h2 id="2-浅克隆">2.浅克隆</h2><p>　　所有的对象都具有拷贝（克隆）的功能，因为Object类中就定义了clone方法。一个类需要被克隆，则该类必须明确继承Cloneable接口，该接口只是其标识作用，另外还必须在该类中重写Object类提供的clone方法，使之支持对象克隆。<br>　　Java对象一般性的克隆，属于<strong>浅克隆</strong>。浅克隆是指只克隆当前对象的副本，而不管该对象内部成员对象是否需要拷贝副本，因此成员对象还是使用原来的引用指向，所以一旦改变克隆对象的成员对象的值，原有值的成员对象属性变量的值也会发生变化。</p>
<h2 id="3-深克隆">3.深克隆</h2><p>　　如果需要彻底解决这种弊端，则需要一次性克隆到底，使用<strong>深克隆</strong>的方式。不但对该对象拷贝副本，对该对象成员对象也进行拷贝，甚至逐级拷贝下去，需要注意的是，这种方式下，成员对象所在类必须支持克隆属性，重写clone方法。</p>
<h2 id="4-示例程序">4.示例程序</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">public class TestObjClone&#123;</span><br><span class="line">  	public static void main(String<span class="comment">[]</span> args) &#123;</span><br><span class="line">  		<span class="keyword">Person</span> per = new <span class="keyword">Person</span>(<span class="string">"zhangsan"</span>, 20);</span><br><span class="line">  		<span class="keyword">Animal</span> a = new <span class="keyword">Animal</span>(<span class="string">"xiaohei"</span>, 8, per);</span><br><span class="line">  		<span class="keyword">Animal</span> b = null;</span><br><span class="line"></span><br><span class="line">  		System.out.println(<span class="string">"before clone: "</span>);</span><br><span class="line">  		System.out.println(<span class="string">"\tAnimal b is null and Animal a is: \n"</span> + a);</span><br><span class="line"></span><br><span class="line">  		b = (<span class="keyword">Animal</span>)a.clone();</span><br><span class="line">  		b.getMaster().setName(<span class="string">"wangwu"</span>);</span><br><span class="line">  		b.getMaster().setAge(50);</span><br><span class="line"></span><br><span class="line">  		System.out.println(<span class="string">"after clone: "</span>);</span><br><span class="line">  		System.out.println(<span class="string">"\tAnimal b master has been changed and Animal a is: \n"</span> + a);</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class <span class="keyword">Animal</span> implements Cloneable&#123;</span><br><span class="line"> 	private String name;</span><br><span class="line"> 	private int age;</span><br><span class="line"> 	private <span class="keyword">Person</span> master;</span><br><span class="line"></span><br><span class="line"> 	public <span class="keyword">Animal</span>()&#123;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public <span class="keyword">Animal</span>(String name, int age, <span class="keyword">Person</span> master)&#123;</span><br><span class="line">  		this.name = name;</span><br><span class="line">  		this.age = age;</span><br><span class="line">  		this.master = master;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public String getName() &#123;</span><br><span class="line">     	return this.name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	public int getAge() &#123;</span><br><span class="line">     	return this.age;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public <span class="keyword">Person</span> getMaster()&#123;</span><br><span class="line">  		return this.master;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setName(String name) &#123;</span><br><span class="line">     	this.name = name;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setAge(int age) &#123;</span><br><span class="line">     	this.age = age;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setMaster(<span class="keyword">Person</span> master)&#123;</span><br><span class="line">  		this.master = master;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public String toString()&#123;</span><br><span class="line">  		return <span class="string">"Animal(name = "</span> + this.getName() + <span class="string">", age = "</span> + this.getAge() </span><br><span class="line">  		+ <span class="string">", master = \n"</span>+ this.getMaster() +<span class="string">")"</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public Object clone()&#123;</span><br><span class="line">  		<span class="keyword">Animal</span> obj = null;</span><br><span class="line">  		try&#123;</span><br><span class="line">  	 		obj = (<span class="keyword">Animal</span>)super.clone();</span><br><span class="line">   			obj.master = (<span class="keyword">Person</span>)master.clone();</span><br><span class="line">  		&#125;catch(CloneNotSupportedException e)&#123;</span><br><span class="line">  		&#125;</span><br><span class="line">  		return obj;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class <span class="keyword">Person</span> implements Cloneable&#123;</span><br><span class="line"> 	private String name;</span><br><span class="line"> 	private int age;</span><br><span class="line"></span><br><span class="line"> 	public <span class="keyword">Person</span>()&#123;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public <span class="keyword">Person</span>(String name, int age)&#123;</span><br><span class="line">  		this.name = name;</span><br><span class="line">  		this.age = age;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public String getName() &#123;</span><br><span class="line">     	return this.name;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public int getAge() &#123;</span><br><span class="line">     	return this.age;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setName(String name) &#123;</span><br><span class="line">     	this.name = name;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setAge(int age) &#123;</span><br><span class="line">     	this.age = age;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public String toString()&#123;</span><br><span class="line">  		return <span class="string">"Per(name = "</span> + this.getName() + <span class="string">", age = "</span> + this.getAge() + <span class="string">")"</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public Object clone()&#123;</span><br><span class="line">  		<span class="keyword">Person</span> obj = null;</span><br><span class="line">  		try&#123;</span><br><span class="line">   			obj = (<span class="keyword">Person</span>)super.clone();</span><br><span class="line">  		&#125;catch(CloneNotSupportedException e)&#123;</span><br><span class="line">  	&#125;</span><br><span class="line"> 	return obj;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序输出如下内容：</p>
<blockquote>
<p>before clone:<br>    Animal b is null and Animal a is:<br>Animal(name = xiaohei, age = 8, master =<br>Per(name = zhangsan, age = 20))<br>after clone:<br>    Animal b master has been changed and Animal a is:<br>Animal(name = xiaohei, age = 8, master =<br>Per(name = zhangsan, age = 20))</p>
</blockquote>
<p>　　以上输出说明进行深克隆后，原有对象中成员对象属性值不会再发生改变。要想测试浅克隆只需将Person类的克隆属性去掉，即取消Cloneable接口和clone方法，另外还需注释掉Animal类clone方法里的master成员对象的克隆，即为浅克隆方式，此种方式下，原有对象的成员对象属性值也会发生改变。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：Java最大的简洁性在于去除了指针，以引用来代替，在函数传参过程中，一般分为<strong>值传递</strong>和<strong>引用传递</strong>，值传递是直接拷贝一份值单元传递过去，原有值不会随被传递值改变而改变；引用传递则传递的是该引用数据类型变量的内存地址，因此原有对象属性值会随着传递引用变量对其的改变而达到间接改变的目的。Java中对所有复杂数据类型包括数组的传递都是引用传递方式，即传其地址，那么如何使Java具有像C和C++那样传递复杂数据类型，而不改变原有值的属性，这就需要利用到Java对象克隆知识了。]]>
    
    </summary>
    
      <category term="Java学习" scheme="http://blog.zbvae.com/tags/Java%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 对象序列化与反序列化]]></title>
    <link href="http://blog.zbvae.com/2015/07/11/Java-%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://blog.zbvae.com/2015/07/11/Java-对象序列化与反序列化/</id>
    <published>2015-07-11T02:02:13.000Z</published>
    <updated>2015-07-11T02:15:14.475Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：本文是关于Java对象序列化与反序列化知识的一个总结和概括，Java对象序列化与反序列提供了一种数据持久化的方式，掌握Java对象序列化与反序列对Java基础知识以及以后的框架学习都有很大的帮助。 <a id="more"></a></p>
<h2 id="1-序列化与反序列化引言">1.序列化与反序列化引言</h2><p>　　我们在程序创建的Java对象都是存在于JVM内存中的，也就是Java对象的生命周期一定不会长于JVM，所以如何以一种持久化的方式保留用户创建的对象呢，这就需要用到对象序列化的知识，将序列化的对象重新还原称为Java对象，即为反序列化。关于Java对象序列化与反序列化，我们需要理解的一点是，序列化只是将Java对象以一种<em>二进制数据流</em>的方式保存到本地文件或其他介质中，它实际上保存的只是实例化对象的一种状态，<strong>对于静态成员，是无法序列化保存的</strong>。</p>
<h2 id="2-序列化与反序列化方法">2.序列化与反序列化方法</h2><p>　　Java对象要支持序列化，该类必须要具有<strong>可序列化</strong>的特性，真正提供实现序列化与反序列化方式的ObjectInputStream和ObjectOutputStream类。Java对象序列化的方式可以分为普通方式和定制方式两种，普通方式，借助Serializable接口完成，不需要用户做过多的干涉和修改；定制方式，用户可以使用transient关键字修饰类中某个属性，使该属性屏蔽序列化特性，使用transient关键字屏蔽之后，被transient修饰的字段序列化后取默认值，而非序列化之前的实例化对象值。如果需要序列化该字段，我们可以将transient关键字去掉，也可以在该类中重写readObject和writeObject方法，并在重写方法中继续序列化屏蔽的字段，从而达到反屏蔽的效果。除了使用transient关键字，重写readObject和writeObject方法实现定制序列化的方式，还有一种与Serializable方式完全不同的支持定制序列化的方式，是指定该类继承自Externalizable接口，但是继承自该接口的类必须明确重写readExternal和writeExternal方法才能实现对象序列化与反序列化，在这两个方法里指定需要序列化和反序列化的属性字段，没有指明的属性将不会被序列化。</p>
<h2 id="3-程序示例">3.程序示例</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">public class TestObjSer&#123;</span><br><span class="line"> 	public static void main(String<span class="comment">[]</span> args) throws Exception&#123;</span><br><span class="line">  		String stuFilePath = <span class="string">"./student.out"</span>;</span><br><span class="line">  		String codFilePath = <span class="string">"./coder.out"</span>;</span><br><span class="line">  		File file = new File(codFilePath);</span><br><span class="line">  		if(!file.exists())&#123;</span><br><span class="line">   			System.out.println(<span class="string">"The serialization file does not exist, which will be created right now!"</span>);</span><br><span class="line">   			file.createNewFile();</span><br><span class="line">  		&#125;</span><br><span class="line">     	Student stu = new Student(<span class="string">"zhangsan"</span>, 17, <span class="keyword">Gender</span>.MALE, <span class="string">"CSU"</span>);</span><br><span class="line">     	Coder coder = new Coder(<span class="string">"lisi"</span>, 18, <span class="keyword">Gender</span>.FEMALE, <span class="string">"JAVA"</span>);</span><br><span class="line">        FileInputStream fis = new FileInputStream(file);</span><br><span class="line">       	FileOutputStream fos = new FileOutputStream(file);</span><br><span class="line">  </span><br><span class="line">       	//following two stream can not be disordered, I have no idea why <span class="keyword">is</span> this</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line">        serObj(oos,coder);</span><br><span class="line">        deSerObj(ois);</span><br><span class="line"> 	&#125;</span><br><span class="line"> </span><br><span class="line"> 	public static void serObj(ObjectOutputStream oos,Object obj) throws Exception &#123;</span><br><span class="line">  		oos.writeObject(obj);</span><br><span class="line">  		oos.close();</span><br><span class="line"> 	&#125;</span><br><span class="line"> </span><br><span class="line"> 	public static void deSerObj(ObjectInputStream ois) throws Exception &#123;</span><br><span class="line">  		<span class="keyword">Person</span> per = (<span class="keyword">Person</span>)ois.readObject();</span><br><span class="line">  		ois.close();</span><br><span class="line"> 		System.out.println(per);</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * the enum type <span class="keyword">is</span> a special type in Java, which <span class="keyword">is</span> generated from </span><br><span class="line"> * class Enum by default and class Enum implements the interface Seralizable</span><br><span class="line"> * so it can be serialized and all member <span class="keyword">of</span> enum should be capital</span><br><span class="line"> */</span><br><span class="line">enum <span class="keyword">Gender</span>&#123;</span><br><span class="line"> 	MALE,FEMALE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * superclass should implement Serialzable</span><br><span class="line"> */</span><br><span class="line">class <span class="keyword">Person</span> implements Serializable&#123;</span><br><span class="line"> 	private String name;</span><br><span class="line"> 	private int age;</span><br><span class="line"> 	private <span class="keyword">Gender</span> <span class="keyword">gender</span>;</span><br><span class="line"> 	public <span class="keyword">Person</span>()&#123;</span><br><span class="line">  		System.out.println(<span class="string">"Non-Arg constructor be called!"</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public <span class="keyword">Person</span>(String name, int age, <span class="keyword">Gender</span> <span class="keyword">gender</span>)&#123;</span><br><span class="line">  		System.out.println(<span class="string">"Arg constructor be called!"</span>);</span><br><span class="line">  		this.name = name;</span><br><span class="line">  		this.age = age;</span><br><span class="line">  		this.<span class="keyword">gender</span> = <span class="keyword">gender</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line">	public String getName() &#123;</span><br><span class="line">     	return this.name;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public int getAge() &#123;</span><br><span class="line">     	return this.age;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public <span class="keyword">Gender</span> getGender()&#123;</span><br><span class="line">  		return this.<span class="keyword">gender</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">     	this.name = name;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setAge(int age) &#123;</span><br><span class="line">     	this.age = age;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setGender(<span class="keyword">Gender</span> <span class="keyword">gender</span>)&#123;</span><br><span class="line">  		this.<span class="keyword">gender</span> = <span class="keyword">gender</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	public String toString()&#123;</span><br><span class="line">  		return <span class="string">"Per(name = "</span> + this.getName() + <span class="string">", age = "</span> </span><br><span class="line">  		+ this.getAge() + <span class="string">", gender = "</span> + this.getGender() +<span class="string">")"</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student extends <span class="keyword">Person</span>&#123;</span><br><span class="line"> 	//use transient to avoid the field school be serialized</span><br><span class="line"> 	private transient String school;</span><br><span class="line"> 	public Student()&#123;</span><br><span class="line">  		super();</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public Student(String name, int age, <span class="keyword">Gender</span> <span class="keyword">gender</span>, String school)&#123;</span><br><span class="line">  		super(name, age, <span class="keyword">gender</span>);</span><br><span class="line">  		this.school = school;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line">	public String getSchool() &#123;</span><br><span class="line">	    return this.school;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setSchool(String school) &#123;</span><br><span class="line">     	this.school = school;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public String toString()&#123;</span><br><span class="line">  		return <span class="string">"Stu(name = "</span> + this.getName() + <span class="string">", age = "</span> + this.getAge() + </span><br><span class="line">  		<span class="string">", gender = "</span> + this.getGender() + <span class="string">", school = "</span> + this.getSchool() +<span class="string">")"</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	private void writeObject(ObjectOutputStream oos) throws IOException &#123;</span><br><span class="line">        oos.defaultWriteObject();//call super</span><br><span class="line">        oos.writeObject(school);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void readObject(ObjectInputStream ois) throws Exception&#123;</span><br><span class="line">        ois.defaultReadObject();//call super</span><br><span class="line">        this.school = (String)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Coder extends <span class="keyword">Person</span> implements Externalizable &#123;</span><br><span class="line"> 	private String language;</span><br><span class="line"> 		public Coder()&#123;</span><br><span class="line">  		super();</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public Coder(String name, int age, <span class="keyword">Gender</span> <span class="keyword">gender</span>, String language)&#123;</span><br><span class="line">  		super(name, age, <span class="keyword">gender</span>);</span><br><span class="line">  		this.language = language;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	public String getLanguage() &#123;</span><br><span class="line">     	return this.language;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public void setLanguage(String language) &#123;</span><br><span class="line">     	this.language = language;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	public String toString()&#123;</span><br><span class="line">  		return <span class="string">"Cod(name = "</span> + this.getName() + <span class="string">", age = "</span> + this.getAge() + </span><br><span class="line">  		<span class="string">", gender = "</span> + this.getGender() + <span class="string">", language = "</span> + this.getLanguage() +<span class="string">")"</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line">	/**</span><br><span class="line">	  * <span class="comment">[readExternal description]</span>serialize by this method should </span><br><span class="line">	  * specify field in readExternal and writeExternal method by user,</span><br><span class="line">	  * it <span class="keyword">is</span> completely different from Serialzable</span><br><span class="line">	  * @param  in                     <span class="comment">[description]</span></span><br><span class="line">	  * @throws IOException            <span class="comment">[description]</span></span><br><span class="line">	  * @throws ClassNotFoundException <span class="comment">[description]</span></span><br><span class="line">	 */</span><br><span class="line">    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">     	this.setName((String)in.readObject());</span><br><span class="line">     	this.setAge(in.readInt());</span><br><span class="line">     	this.setGender((<span class="keyword">Gender</span>)in.readObject());</span><br><span class="line">     	this.language = (String)in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void writeExternal(ObjectOutput out) throws IOException &#123;</span><br><span class="line">     	out.writeObject(this.getName());</span><br><span class="line">     	out.writeInt(this.getAge());</span><br><span class="line">     	out.writeObject(this.getGender());</span><br><span class="line">     	out.writeObject(this.language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-序列化与反序列化总结">4.序列化与反序列化总结</h2><p>上面的程序示例基本展示了Java对象序列化与反序列化的所有知识，还有一些相关知识，希望在这里啰嗦几句:</p>
<ul>
<li>enum属于Java中的特殊类型，凡是enum类型声明的变量都是默认继承自Enum类，且默认具有序列化特性。</li>
<li>Java对象序列化采取级联机制，即如果一个对象引用了其它对象作为其属性，那么在序列化时，引用对象也将被序列化。</li>
<li>要想从父类继承的成员也被序列化，则父类必须明确支持序列化特性，即继承Serializable接口。</li>
<li>Java序列化的底层原理利用的是反射机制，这个将在后续介绍。</li>
<li>从其他博客看到的一点，关于单例模式单例对象的序列化，要想实现反序列化后的对象与单例对象相等，一个解决方法就是替代序列化过程，在该类中添加一个readResolve方法：无论是实现Serializable接口，或是Externalizable接口，当从I/O流中读取对象时，readResolve()方法都会被调用到。实际上就是用readResolve()中返回的对象直接替换在反序列化过程中创建的对象，而被创建的对象则会被垃圾回收掉（这句话是别人的）。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：本文是关于Java对象序列化与反序列化知识的一个总结和概括，Java对象序列化与反序列提供了一种数据持久化的方式，掌握Java对象序列化与反序列对Java基础知识以及以后的框架学习都有很大的帮助。]]>
    
    </summary>
    
      <category term="Java学习" scheme="http://blog.zbvae.com/tags/Java%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java IO 学习]]></title>
    <link href="http://blog.zbvae.com/2015/07/11/Java-IO-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.zbvae.com/2015/07/11/Java-IO-学习/</id>
    <published>2015-07-11T01:53:28.000Z</published>
    <updated>2015-07-11T02:02:48.137Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：IO无疑是学习每一门语言都要求掌握的编程知识点，一些大型项目都离不开IO的支持，因此掌握IO相关操作，对以后的学习和工作都是很有必要的。IO知识说难不难，但是每到用的时候，我们都需要查阅，本文从Java语言面向对象的特点出发，讲述Java IO的一些知识，仅供参考。<a id="more"></a></p>
<h2 id="1-IO_基本知识">1.IO 基本知识</h2><p>　　IO是以流的方式来组织和传播，与流水非常相似。从源头输出不断流淌输入到目的地，中间为了方便，可能还会加上水管来辅助输出，水量小的时候，一滴滴或者涓涓细流，这时候我们可以建筑水坝库存到一定量才释放，有的水流汇入江海，而有的则直接流入千家百户。<br>　　在Java IO体系中，根据流的成分不同，可以分为<strong>字符流</strong>和<strong>字节流</strong>两种；根据流向不同，可以分为<strong>输入流</strong>和<strong>输出流</strong>；根据源头不同，可以分为<strong>文件流和内存流</strong>；为了便于输出和通信，Java也提供了<strong>管道流</strong>和<strong>缓存流</strong>；根据输出目的地不同，可以通过<strong>打印流</strong>来控制是输出到文件还是其他地方；为了支持序列化，Java还提供了<strong>对象流</strong>；为了支持数据的访问和保存，Java提供了<strong>数据流</strong>；为了支持文件的压缩与解压缩，Java提供了<strong>文件压缩与解压缩流</strong>。以下关于各个流的几个注意点：</p>
<ul>
<li>以内存为参照：流入内存为输入流，流出内存，汇入外地，为输出流。</li>
<li>字符流是以字符为单位，主要处理文本文件；字节流以字节为传输单位，可以处理文本，语音和图像等任何信息，字节流的应用范围更广。Java提供了InputStreamReader和OutputStreamWriter来实现字符流与字节流的转换。</li>
<li>管道流主要解决线程间通信，应用不多。</li>
<li>缓存流为了数据的传输提供了一种包装的形式，例如BufferedReader则提供了readLine()方法，可以更好地处理数据的流通。</li>
<li>打印流需要制定流向，可以流向屏幕，可以流向文件，在构造的时候进行装填即可。</li>
<li>对象流无疑是将数据以对象的形式保存到文件或其他地方，提供了一种数据持久化方案，配合实现对象序列化，在很多大型项目都有非常重要的使用。</li>
<li>数据流用于保存和读取数据，readInt或writeInt方法等。</li>
<li>Scanner接收用户输入，更便捷的处理方式。</li>
<li>文件压缩和解压缩流，提供了文件压缩与解压缩方法，每个压缩文件都是一个ZipEntry实体对象。</li>
</ul>
<h2 id="2-程序代码示例">2.程序代码示例</h2><h3 id="2-1文件拷贝">2.1文件拷贝</h3><p>　　该例子系统讲述了字符流、字节流、输入流、输出流、包装流、打印流的使用。需要注意的时候，在程序执行完，需要关闭打开的所有流。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> FileCopy&#123;</span><br><span class="line"> 	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyByChar(String srcFilePath, String desFilePath)&#123;</span><br><span class="line">  		<span class="keyword">File</span> srcFile = <span class="keyword">null</span>;</span><br><span class="line">  		<span class="keyword">File</span> desFile = <span class="keyword">null</span>;</span><br><span class="line">		BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">		PrintWriter pw = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			srcFile = <span class="keyword">new</span> <span class="keyword">File</span>(srcFilePath);</span><br><span class="line">			desFile = <span class="keyword">new</span> <span class="keyword">File</span>(desFilePath);</span><br><span class="line">			br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(srcFile));</span><br><span class="line">			pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(desFile));</span><br><span class="line">			String temp = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span>((temp = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">			    pw.<span class="keyword">println</span>(temp);</span><br><span class="line">			    pw.flush();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">		   	e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">		   	<span class="keyword">try</span>&#123;</span><br><span class="line">		    	pw.close();</span><br><span class="line">		    	br.close();</span><br><span class="line">		   	&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">		    	e.printStackTrace();</span><br><span class="line">		   	&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"copy file by char done"</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyByByte(String srcFilePath, String desFilePath)&#123;</span><br><span class="line">		<span class="keyword">File</span> srcFile = <span class="keyword">null</span>;</span><br><span class="line">	  	<span class="keyword">File</span> desFile = <span class="keyword">null</span>;</span><br><span class="line">	  	InputStream is = <span class="keyword">null</span>;</span><br><span class="line">	  	OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">	  	<span class="keyword">try</span>&#123;</span><br><span class="line">	   		srcFile = <span class="keyword">new</span> <span class="keyword">File</span>(srcFilePath);</span><br><span class="line">	   		desFile = <span class="keyword">new</span> <span class="keyword">File</span>(desFilePath);</span><br><span class="line">	   		is = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">	  		os = <span class="keyword">new</span> FileOutputStream(desFile);</span><br><span class="line">	   		<span class="keyword">byte</span> buf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">	   		<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	   		<span class="keyword">while</span>((len = is.<span class="keyword">read</span>(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">	    		os.<span class="keyword">write</span>(buf,<span class="number">0</span>,len);</span><br><span class="line">	    		os.flush();</span><br><span class="line">	   		&#125;</span><br><span class="line">	  	&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">	   		e.printStackTrace();</span><br><span class="line">	  	&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	   		<span class="keyword">try</span>&#123;</span><br><span class="line">	   	 		os.close();</span><br><span class="line">	    		is.close();</span><br><span class="line">	   		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">	   		&#125;</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	System.out.<span class="keyword">println</span>(<span class="string">"copy file by byte done"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2内存流的使用">2.2内存流的使用</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> testByArrayStream(<span class="keyword">String</span> <span class="built_in">str</span>)&#123;</span><br><span class="line">  	ByteArrayInputStream bais = <span class="keyword">null</span>;</span><br><span class="line">  	ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">  	<span class="keyword">try</span>&#123;</span><br><span class="line">   		bais = <span class="keyword">new</span> ByteArrayInputStream(<span class="built_in">str</span>.getBytes());</span><br><span class="line">  		baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    </span><br><span class="line">   		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">str</span>.length();i++)&#123;</span><br><span class="line">    		<span class="built_in">char</span> c = (<span class="built_in">char</span>)bais.read();</span><br><span class="line">    		baos.write(Character.toUpperCase(c));</span><br><span class="line">   		&#125;</span><br><span class="line">   		System.out.<span class="built_in">println</span>(baos.toString());</span><br><span class="line">    </span><br><span class="line">	   <span class="comment">/*</span><br><span class="line">	   byte buf[] = new byte[1024];</span><br><span class="line">	   int len = bais.read(buf);</span><br><span class="line">	   baos.write(buf,0,len);</span><br><span class="line">	   System.out.println(baos.toString().toUpperCase());</span><br><span class="line">	   */</span></span><br><span class="line">  	&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  		 e.printStackTrace();</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-管道流的使用">2.3.管道流的使用</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Sender</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span><br><span class="line"> 	<span class="keyword">private</span> PipedOutputStream <span class="keyword">out</span> = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="title">Sender</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  		<span class="keyword">out</span> = <span class="keyword">new</span> PipedOutputStream();</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> PipedOutputStream <span class="title">getOut</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  		<span class="keyword">return</span> <span class="keyword">out</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  		String message = <span class="string">"hello, moto"</span>;</span><br><span class="line">  		<span class="keyword">try</span>&#123;</span><br><span class="line">   			<span class="keyword">out</span>.write(message.getBytes());</span><br><span class="line">  		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">   			e.printStackTrace();</span><br><span class="line">  		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">   			<span class="keyword">try</span>&#123;</span><br><span class="line">   		 		<span class="keyword">out</span>.close();</span><br><span class="line">   			&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">   			&#125;</span><br><span class="line">  		&#125;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Receiver</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span><br><span class="line"> 	<span class="keyword">private</span> PipedInputStream <span class="keyword">in</span> = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="title">Receiver</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  		<span class="keyword">in</span> = <span class="keyword">new</span> PipedInputStream();</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> PipedInputStream <span class="title">getIn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  		<span class="keyword">return</span> <span class="keyword">in</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  		<span class="keyword">byte</span> buf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">  		<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">  		<span class="keyword">try</span>&#123;</span><br><span class="line">   			len = <span class="keyword">in</span>.read(buf);</span><br><span class="line">  		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">   			e.printStackTrace();</span><br><span class="line">  		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">   			<span class="keyword">try</span>&#123;</span><br><span class="line">    			<span class="keyword">in</span>.close();</span><br><span class="line">   			&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">   			&#125;</span><br><span class="line">  		&#125;</span><br><span class="line">  		System.<span class="keyword">out</span>.println(<span class="string">"recevied:"</span> + <span class="keyword">new</span> String(buf,<span class="number">0</span>,len));</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上是发送线程和接收线程，为了支持线程通信，需要使用PipedOutpuStream的connect方法连接PipedInputStream。    </p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void testPipedStream<span class="literal">()</span>&#123;</span><br><span class="line">  	<span class="type">Sender</span> sender = <span class="keyword">new</span> <span class="type">Sender</span><span class="literal">()</span>;</span><br><span class="line">  	<span class="type">Receiver</span> receiver = <span class="keyword">new</span> <span class="type">Receiver</span><span class="literal">()</span>;</span><br><span class="line">  	<span class="keyword">try</span>&#123;</span><br><span class="line">   		sender.getOut<span class="literal">()</span>.connect(receiver.getIn<span class="literal">()</span>);</span><br><span class="line">  	&#125;catch(<span class="type">Exception</span> e)&#123;</span><br><span class="line">   		e.printStackTrace<span class="literal">()</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">new</span> <span class="type">Thread</span>(sender).start<span class="literal">()</span>;</span><br><span class="line">  	<span class="keyword">new</span> <span class="type">Thread</span>(receiver).start<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4Scanner_接收用户输入">2.4Scanner 接收用户输入</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testScaner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	Scanner sc = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</span><br><span class="line">  	String name = sc.next();</span><br><span class="line">  	<span class="keyword">int</span> age = sc.nextInt();</span><br><span class="line">  	System.<span class="keyword">out</span>.println(<span class="string">"name="</span>+name+<span class="string">" age="</span>+age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5文件压缩流">2.5文件压缩流</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> testFileZip(String srcFilePath, String zipFilePath)&#123;</span><br><span class="line">  	<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">null</span>;</span><br><span class="line">  	InputStream in = <span class="keyword">null</span>;</span><br><span class="line">  	ZipOutputStream zipOut = <span class="keyword">null</span>;</span><br><span class="line">  	<span class="keyword">try</span>&#123;</span><br><span class="line">   		<span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(srcFilePath);</span><br><span class="line">   		in = <span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>);</span><br><span class="line">   		zipOut = <span class="keyword">new</span> ZipOutputStream(<span class="keyword">new</span> FileOutputStream(zipFilePath));</span><br><span class="line">   		zipOut.putNextEntry(<span class="keyword">new</span> ZipEntry(<span class="keyword">file</span>.getName()));</span><br><span class="line">   		zipOut.setComment(<span class="string">"hello world"</span>);</span><br><span class="line">   		<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">   		<span class="keyword">while</span>((temp = in.<span class="keyword">read</span>()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    		zipOut.<span class="keyword">write</span>(temp);</span><br><span class="line">   		&#125;</span><br><span class="line">  	&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">   		e.printStackTrace();</span><br><span class="line">  	&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">   		<span class="keyword">try</span>&#123;</span><br><span class="line">    		zipOut.close();</span><br><span class="line">    		in.close();</span><br><span class="line">   		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    		e.printStackTrace();</span><br><span class="line">   		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">  	System.out.<span class="keyword">println</span>(<span class="string">"zip done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6文件解压缩流">2.6文件解压缩流</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> testFileUnZip(String zipFilePath)&#123;</span><br><span class="line">  	<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">null</span>;</span><br><span class="line">   	<span class="keyword">File</span> outFile = <span class="keyword">null</span>;</span><br><span class="line">   	ZipFile zipFile = <span class="keyword">null</span>;</span><br><span class="line">   	ZipInputStream zipIn = <span class="keyword">null</span>;</span><br><span class="line">   	ZipEntry entry = <span class="keyword">null</span>;</span><br><span class="line">   	InputStream in = <span class="keyword">null</span>;</span><br><span class="line">   	OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">   	<span class="keyword">try</span>&#123;</span><br><span class="line">   		<span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(zipFilePath);</span><br><span class="line">   		zipFile = <span class="keyword">new</span> ZipFile(<span class="keyword">file</span>);</span><br><span class="line">   		zipIn = <span class="keyword">new</span> ZipInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>));</span><br><span class="line">   		<span class="keyword">while</span>((entry = zipIn.getNextEntry()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    		System.out.<span class="keyword">println</span>(<span class="string">"un zip "</span> +entry.getName());</span><br><span class="line">    		outFile = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"./unzip/"</span> + entry.getName());</span><br><span class="line">    		<span class="keyword">if</span>(!outFile.getParentFile().exists())&#123;</span><br><span class="line">     			outFile.getParentFile().mkdir();</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">if</span>(!outFile.exists())&#123;</span><br><span class="line">     			outFile.createNewFile();</span><br><span class="line">    		&#125;</span><br><span class="line">    		in = zipFile.getInputStream(entry);</span><br><span class="line">    		out = <span class="keyword">new</span> FileOutputStream(outFile);</span><br><span class="line">    		<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    		<span class="keyword">while</span>((temp = in.<span class="keyword">read</span>()) != -<span class="number">1</span>)&#123;</span><br><span class="line">     			out.<span class="keyword">write</span>(temp);</span><br><span class="line">    		&#125;</span><br><span class="line">   		&#125;</span><br><span class="line">  	&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">   		e.printStackTrace();</span><br><span class="line">  	&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">   		<span class="keyword">try</span>&#123;</span><br><span class="line">    		out.close();</span><br><span class="line">    		in.close();</span><br><span class="line">    		zipIn.close();</span><br><span class="line">   		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    		e.printStackTrace();</span><br><span class="line">   		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">  	System.out.<span class="keyword">println</span>(<span class="string">"un zip done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上几乎包含了所有Java Io流的操作，关于对象流及其支持的序列化与反序列化特性将在后面介绍。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：IO无疑是学习每一门语言都要求掌握的编程知识点，一些大型项目都离不开IO的支持，因此掌握IO相关操作，对以后的学习和工作都是很有必要的。IO知识说难不难，但是每到用的时候，我们都需要查阅，本文从Java语言面向对象的特点出发，讲述Java IO的一些知识，仅供参考。]]>
    
    </summary>
    
      <category term="Java学习" scheme="http://blog.zbvae.com/tags/Java%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo和Github搭建自己的个人博客网站]]></title>
    <link href="http://blog.zbvae.com/2015/07/09/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>http://blog.zbvae.com/2015/07/09/使用Hexo和Github搭建自己的个人博客网站/</id>
    <published>2015-07-09T11:53:48.000Z</published>
    <updated>2015-07-10T01:07:39.204Z</updated>
    <content type="html"><![CDATA[<p>　　最近花了几天时间利用<strong>Hexo</strong>和<strong>Github</strong>搭建自己的个人博客网站，虽然中间的过程也是折腾够了，但是结果还是非常令人满意的，毕竟现在网站已经跑起来，独乐乐不如众乐乐，所以决定写这篇文章，也给大家介绍一下经验，顺便也对<strong>Markdown</strong>写博客练一下手。好了，让我们进入正题吧! <a id="more"></a></p>
<h2 id="1-环境搭建">1.环境搭建</h2><p>　　使用Hexo+Github搭建自己的个人博客网站，主要分为两步：</p>
<blockquote>
<ul>
<li>在本地下载好Hexo，并选择文件夹，新建本地博客，</li>
<li>将本地建立好的Hexo博客托管到Github上。</li>
</ul>
</blockquote>
<p>本文所有一切都是针对Windows 7系统，因此如果是Linux或其他操作系统请自行索取相关学习资料。</p>
<h3 id="1-1Git安装">1.1Git安装</h3><p>　　由于新建好的Hexo博客需要与Github关联，因此首先安装<a href="http://git-scm.com/download/win" target="_blank" rel="external">Git</a>工具，直接下载安装。这时，在你的开始菜单会有Git工具选项，证明你已安装完成Git工具(非常好用的版本控制工具，可以用来管理你的项目)。</p>
<h3 id="1-2Node-js安装">1.2Node.js安装</h3><p>　　为了下载Hexo，你还需要安装<a href="https://nodejs.org/download/" target="_blank" rel="external">node.js</a>，选择<strong>msi</strong>版本下载安装，系统会自动为你添加node和npm的环境变量(node.js中集成了npm模块)。这时候，可以选择在Dos命令行输入<code>node -v</code>和<code>npm -v</code>，如果出现以下内容</p>
<center> <img src="/images/node&amp;npm.png" alt="node&amp;npm"> </center>

<p>说明你已完成node.js的安装和配置。</p>
<h3 id="1-3Hexo安装">1.3Hexo安装</h3><p>　　终于进入我们正题的第一步了。找到开始菜单的Git工具，选择Git bash打开，输入<code>npm install hexo -g</code>，安装hexo全局环境。</p>
<h2 id="2-新建Hexo博客">2.新建Hexo博客</h2><p>　　安装好全局Hexo环境之后，在本地硬盘新建目录<strong>MyHexoBlog</strong>，名字可以自己随便取。在该目录上选择右击，进入Git bash环境，输入<code>hexo init</code>，实际上，这已经为我们新建好了本地Hexo博客了，要想访问，还必须先开启hexo服务，但是hexo服务的开启，还需要在该文件夹下安装hexo的所有依赖，直接在Git bash上输入<code>npm install</code>，这时候，会自动安装好所有hexo依赖，包括hexo server服务，输入<code>hexo s</code>，这里的<strong>s</strong>即表示server服务。服务开启之后，在浏览器端，可以直接输入<code>localhost:4000</code>进行Hexo博客网站的浏览，如果你能成功浏览，则说明前面的一切都没有问题，恭喜你，你的个人Hexo博客已经建立完成了。<br>总结一下，包括以下几步：</p>
<blockquote>
<ul>
<li>在本地硬盘新建目录<strong>MyHexoBlog</strong></li>
<li>在该目录上右击，选择Git bash进入，依次输入：<blockquote>
<ul>
<li>hexo init</li>
<li>npm install</li>
<li>hexo s</li>
</ul>
</blockquote>
</li>
<li>在本地浏览器地址栏输入<code>localhost:4000</code>验证</li>
</ul>
</blockquote>
<h2 id="3-Hexo博客的配置">3.Hexo博客的配置</h2><h3 id="3-1主配置">3.1主配置</h3><p>　　Hexo博客的主配置在<strong>MyHexoBlog</strong>目录下的<strong>_config.yml</strong>文件，选择某一文本编辑器(可以是nodepad++，也可以是sublime text，但不要用一般的记事本)打开。下面介绍Hexo博客的一些主要配置。</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Hexo Configuration</span></span><br><span class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="preprocessor">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Site 注意：后面的空格</span></span><br><span class="line"><span class="label">title:</span> <span class="string">"My blog"</span>  <span class="preprocessor"># 网页标题</span></span><br><span class="line"><span class="label">subtitle:</span> <span class="string">"good good study, day day up!"</span> <span class="preprocessor"># 显示在作者下面的副标题</span></span><br><span class="line"><span class="label">description:</span> <span class="string">"hello world"</span> <span class="preprocessor"># 描述信息我也不知道显示在哪</span></span><br><span class="line"><span class="label">author:</span> <span class="string">"zhangsan"</span> <span class="preprocessor"># 作者姓名</span></span><br><span class="line"><span class="label">language:</span> <span class="built_in">zh</span>-CN <span class="preprocessor"># 网站语言</span></span><br><span class="line"><span class="label">timezone:</span> <span class="preprocessor"># 时区</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># URL</span></span><br><span class="line"><span class="preprocessor">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="label">url:</span> <span class="preprocessor"># 这里可以填写你的站点，后面会托管到github上，因此这里可以填写你的github URL</span></span><br><span class="line"><span class="label">root:</span> / <span class="preprocessor"># 主目录，目录树的形式</span></span><br><span class="line"><span class="label">permalink:</span> :year/:month/:day/:title/ <span class="preprocessor"># 这是新建博客的默认标签，最好不要更改</span></span><br><span class="line"><span class="label">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Directory</span></span><br><span class="line"><span class="label">source_dir:</span> source</span><br><span class="line"><span class="label">public_dir:</span> public <span class="preprocessor"># 这是要发布到github上的内容所生成的文件夹</span></span><br><span class="line"><span class="label">tag_dir:</span> tags</span><br><span class="line"><span class="label">archive_dir:</span> archives</span><br><span class="line"><span class="label">category_dir:</span> categories</span><br><span class="line"><span class="label">code_dir:</span> downloads/code</span><br><span class="line"><span class="label">i18n_dir:</span> :lang</span><br><span class="line"><span class="label">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Writing</span></span><br><span class="line"><span class="label">new_post_name:</span> :title.md <span class="preprocessor"># File name of new posts</span></span><br><span class="line"><span class="label">default_layout:</span> post</span><br><span class="line"><span class="label">titlecase:</span> false <span class="preprocessor"># Transform title into titlecase</span></span><br><span class="line"><span class="label">external_link:</span> true <span class="preprocessor"># Open external links in new tab</span></span><br><span class="line"><span class="label">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="label">render_drafts:</span> false</span><br><span class="line"><span class="label">post_asset_folder:</span> false</span><br><span class="line"><span class="label">relative_link:</span> false</span><br><span class="line"><span class="label">future:</span> true</span><br><span class="line"><span class="label">highlight:</span></span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Category &amp; Tag</span></span><br><span class="line"><span class="label">default_category:</span> uncategorized</span><br><span class="line"><span class="label">category_map:</span></span><br><span class="line"><span class="label">tag_map:</span> [随笔, 杂念] <span class="preprocessor"># 你自己新建的标签</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Date / Time format</span></span><br><span class="line"><span class="preprocessor">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="preprocessor">## You can customize the date format as defined in</span></span><br><span class="line"><span class="preprocessor">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="label">date_format:</span> YYYY-MM-DD <span class="preprocessor"># 日期格式</span></span><br><span class="line"><span class="label">time_format:</span> HH:mm:ss <span class="preprocessor"># 时间格式</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Pagination</span></span><br><span class="line"><span class="preprocessor">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="label">per_page:</span> <span class="number">10</span> <span class="preprocessor"># 默认每页显示10篇文章</span></span><br><span class="line"><span class="label">pagination_dir:</span> page</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Extensions</span></span><br><span class="line"><span class="preprocessor">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="preprocessor">## Themes: http://hexo.io/themes/</span></span><br><span class="line"><span class="label">theme:</span> yilia <span class="preprocessor"># 主题可以自己选择自己喜欢的下载使用，我使用的是litten的yilia主题</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 以下是我安装的插件，主要支持rss订阅功能和google   Sitemap追踪功能</span></span><br><span class="line"><span class="label">Plugins:</span></span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Feed Atom</span></span><br><span class="line"><span class="label">feed:</span></span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># sitemap</span></span><br><span class="line"><span class="label">sitemap:</span></span><br><span class="line">  path: sitemap.xml</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Deployment</span></span><br><span class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="preprocessor"># 发布到github上所需要填写的内容</span></span><br><span class="line"><span class="label">deploy:</span></span><br><span class="line">  type: git <span class="preprocessor">#发布器</span></span><br><span class="line">  repo: git@github.com:username/username.github.io.git <span class="preprocessor">#使用git协议的仓库地址最快最好，username是你的github账号的用户名</span></span><br><span class="line">  branch: master <span class="preprocessor">#分支，个人博客网站最好使用主分支</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2修改主题">3.2修改主题</h3><p>　　Hexo默认主题是landscape放置在MyHexoBlog主目录下的themes目录下。不敢说此主题很好看，所以一般都会换掉，网上有很多漂亮的Hexo主题可供下载使用，这里我选择的是litten的yilia主题，主题的下载其实很简单，只需要在MyHexoBlog目录右击的Git bash上，输入</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/litten</span><span class="regexp">/hexo-theme-yilia.git themes/yilia</span></span><br></pre></td></tr></table></figure>
<p>然后在主配置文件中更改theme为yilia即可。</p>
<h3 id="3-3主题配置">3.3主题配置</h3><p>　　下载下来的yilia主题，其实我们也可以做很多配置，主题配置文件存在于themes/yilia/下，也是_config.yml文件，与主配置文件一样，进行你自己的定制就可以了。</p>
<p>　　这里介绍一个添加<strong>fork me on github</strong>到主题上的tip，进入themes/yilia/layout下，打开编辑layout.ejs文件，我所说的一切打开和编辑工作最好是在类似于notepad++或sublime text这种富文本编辑器中进行。在layout.ejs文件中的标签之前加上下面这句：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="variable">href=</span><span class="string">"https://github.com/zbvae"</span>&gt;&lt;img <span class="variable">style=</span><span class="string">"z-index:9999; position: absolute; top: 0; left: 0; border: 0;"</span> <span class="variable">src=</span><span class="string">"https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67"</span> <span class="variable">alt=</span><span class="string">"Fork me on GitHub"</span> <span class="variable">data-canonical-src=</span><span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png"</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-将Hexo博客发布到Github上">4.将Hexo博客发布到Github上</h2><p>　　将本地新建好的Hexo博客发布到Github上，首先，你要在<a href="https://github.com" target="_blank" rel="external">Github</a>官网上，申请github账号，输入用户名和邮箱一定要谨慎，记住最好不要输入163邮箱了，本人亲身经历，163邮箱始终收不到github的验证邮件，导致开始建站一直访问不了，后面我只能重新新建了账户。<br>　　新建好github账户之后，需要在本地做一些安全性的配置(<strong>以下输入的用户名和邮箱都要与申请github账号时输入的一致</strong>)，主要有以下几个方面：</p>
<blockquote>
<ul>
<li>配置github全局用户名：<code>git config --global user.name &quot;your username&quot;</code></li>
<li>配置github全局邮箱：<code>git config --global user.email &quot;your email address&quot;</code></li>
<li>配置github ssh key：<code>ssh-keygen -t rsa -C &quot;your email address&quot;</code></li>
</ul>
</blockquote>
<p>将此处生成的ssh key的公钥(具体位置在你生成之后会提示出来)，填写到github账户上的ssh key一栏。这样就完成了本地git与远程github服务器的关联。要将本地Hexo博客发布到Github Pages，需要先创建远程仓库，直接在你的github页面下，选择create repository，这时，注意，你输入的仓库名，一定要是<strong>username.github.io</strong>(注意username与你的账户名对应)，主分支默认的github page页，每个账户唯一。创建好远程仓库之后，现在可以从本地发布博客了。<br>　　注意发布的配置选项已经在主配置中介绍过了。还是在MyHexoBlog上右击进入Git bash，由于默认的git发布工具没有安装，先输入<code>npm install hexo-deployer-git --save</code>安装git发布器。依次输入如下命令，完成博客发布：</p>
<blockquote>
<ul>
<li>输入<code>hexo clean</code> 先清空MyHexoBlog下的所有静态网页，即删除之前已经发布的public文件(第一次发布可以省略这一步)</li>
<li>输入<code>hexo g</code> 这里的<strong>g</strong>就是generate，意思是生成静态网页，即生成public文件夹</li>
<li>输入<code>hexo d</code> 这里的<strong>d</strong>就是deploy， 意思是发布到指定的仓库。</li>
</ul>
</blockquote>
<p>正常的话，现在你的github上默认用户名仓库就已经有了博客文件了，你可以在浏览器输入<a href="https://username.github.io" target="_blank" rel="external">https://username.github.io</a>进行访问(username与你账户名username对应)，若访问hexo博客成功，说明你本地的博客已经成功发布到github上了。</p>
<h2 id="5-域名绑定">5.域名绑定</h2><p>　　域名绑定的前提是，你已经有了自己的域名，域名的购买，你可以在godaddy网站上购买，大部分人都是在此网站上买的，我的域名是在阿里云买的，也很便宜，解析起来也很方便。<br>　　为了将你的域名绑定到github page，首先在本地输入<code>ping username.github.io</code>得到ip地址，然后登陆你的域名管理器(在哪买的，你就去哪吧)，添加解析，A类解析，@和www记录配套，输入上面得到的ip地址，完成。</p>
<center> <img src="/images/domain.png" alt="domain"> </center>

<p>　　最后一步工作就是，在你的远程仓库主目录下，新建CNAME文件，里面输入<code>你的域名</code>，注意这里的域名不需要任何如www等的前缀。提交更改之后，点击右边的setting栏，下拉，看到Github Pages上，如果说你的页面被发布至你的域名下，那么你就成功了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　最近花了几天时间利用<strong>Hexo</strong>和<strong>Github</strong>搭建自己的个人博客网站，虽然中间的过程也是折腾够了，但是结果还是非常令人满意的，毕竟现在网站已经跑起来，独乐乐不如众乐乐，所以决定写这篇文章，也给大家介绍一下经验，顺便也对<strong>Markdown</strong>写博客练一下手。好了，让我们进入正题吧!]]>
    
    </summary>
    
      <category term="技术交流" scheme="http://blog.zbvae.com/tags/%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81/"/>
    
  </entry>
  
</feed>